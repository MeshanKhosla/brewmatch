generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  cafesCreated  Cafe[]
  DrinkProfile  DrinkProfile[]
  orders        Order[]
  sessions      Session[]
  Review        Review[]

  @@index([id])
  @@index([name])
}

model VerificationToken {
  identifier String
  token      String   @id @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Order {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  drinkId   String
  userId    String
  drink     Drink    @relation(fields: [drinkId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([id])
  @@index([drinkId])
  @@index([userId])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  drink     Drink    @relation(fields: [drinkId], references: [id])
  userId    String
  drinkId   String

  @@index([id])
  @@index([rating])
}

model Cafe {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  latitude    Float?
  longitude   Float?
  createdBy   User     @relation(fields: [userId], references: [id])
  drinks      Drink[]

  @@index([id])
  @@index([name])
  @@index([userId])
}

model Drink {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  cafeId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sweetness   Int
  cafe        Cafe     @relation(fields: [cafeId], references: [id], onDelete: Cascade)
  Order       Order[]
  Review      Review[]

  @@index([id])
  @@index([name])
  @@index([cafeId])
  @@index([description])
}

model DrinkProfile {
  id                   String   @id @default(cuid())
  name                 String
  naturalLanguageInput String
  sweetness            Int
  ice                  IceLevel
  milk                 MilkType
  userId               String
  creator              User     @relation(fields: [userId], references: [id])

  @@index([id])
  @@index([name])
  @@index([naturalLanguageInput])
  @@index([userId], map: "DrinkProfile_userId_fkey")
}

enum IceLevel {
  NO_ICE
  LESS_ICE
  REGULAR_ICE
  MORE_ICE
}

enum MilkType {
  WHOLE
  TWO_PERCENT
  ALMOND
  OAT
  SOY
  NONFAT
  COCONUT
  NONE
}
